---
import Navbar from "../../components/Navbar.astro";
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Panel de administración">
	<Navbar />
	<main class="p-8 max-w-screen-xl">
		<h1 class="text-4xl font-extrabold mb-6 text-gray-800">Detalles</h1>
		<p class="text-lg text-gray-600">Estado del sistema y reportes</p>

		<section class="pb-12 pt-4">
			<div class="mt-6">
				<h2 class="text-lg font-semibold">Estado de la SIM</h2>
				<div id="sim-status" class="flex items-center">
					<div
						id="sim-status-indicator"
						class="w-3 h-3 rounded-full mr-2 bg-gray-400"
					>
					</div>
					<p id="sim-status-text">Cargando...</p>
				</div>
			</div>

			<script defer>
				async function getSimStatus() {
					try {
						const response = await fetch("/api/sim-status");
						const status = await response.json();

						const statusIndicator = document.getElementById(
							"sim-status-indicator",
						);
						const statusText =
							document.getElementById("sim-status-text");

						if (status.active) {
							statusIndicator.classList.remove("bg-gray-400");
							statusIndicator.classList.add("bg-green-500");
							statusText.textContent = "SIM Activa";
						} else if (status.error) {
							statusIndicator.classList.remove("bg-gray-400");
							statusIndicator.classList.add("bg-red-500");
							statusText.textContent = "Error en la SIM";
						} else {
							statusIndicator.classList.remove("bg-gray-400");
							statusIndicator.classList.add("bg-yellow-500");
							statusText.textContent = "Iniciando...";
						}
					} catch (error) {
						console.error(
							"Error al obtener el estado de la SIM:",
							error,
						);
					}
				}

				window.onload = () => getSimStatus();
				setInterval(() => {
					getSimStatus();
				}, 1000);
			</script>
		</section>
		<section class="pb-12">
			<div class="mt-4">
				<h3 class="text-lg font-medium">Monitoreo del Sistema</h3>
				<div id="system-monitor" class="mt-2 space-y-2">
					<div class="flex items-center">
						<div
							id="cpu-indicator"
							class="w-3 h-3 rounded-full bg-yellow-500 mr-2"
						>
						</div>
						<span id="cpu-usage">Cargando uso de CPU...</span>
					</div>
					<div class="flex items-center">
						<div
							id="mem-indicator"
							class="w-3 h-3 rounded-full bg-yellow-500 mr-2"
						>
						</div>
						<span id="mem-usage">Cargando uso de Memoria...</span>
					</div>
					<div class="flex items-center">
						<div
							id="disk-indicator"
							class="w-3 h-3 rounded-full bg-yellow-500 mr-2"
						>
						</div>
						<span id="disk-usage">Cargando uso del disco...</span>
					</div>
					<div class="flex items-center">
						<div
							id="temp-indicator"
							class="w-3 h-3 rounded-full bg-yellow-500 mr-2"
						>
						</div>
						<span id="temp-value">Cargando termperatura...</span>
					</div>
					<div class="flex items-center">
						<div
							id="uptime-indicator"
							class="w-3 h-3 rounded-full bg-green-500 mr-2"
						>
						</div>
						<span id="uptime-value"
							>Cargando tiempo encendido...</span
						>
					</div>
				</div>
			</div>

			<script defer>
				async function getSystemStatus() {
					const response = await fetch("/api/system-status");
					const data = await response.json();
					const memUsage = (
						(data.usedMem.replace(" MB", "") /
							data.totalMem.replace(" MB", "")) *
						100
					).toFixed(2);
					const diskUsage = (
						(data.usedDisk.replace("G", "") /
							data.totalDisk.replace("G", "")) *
						100
					).toFixed(2);

					const temp = (data.temp.replace(" °C", "") * 1).toFixed(2);
					const cpuIndicator =
						document.getElementById("cpu-indicator");
					const memIndicator =
						document.getElementById("mem-indicator");
					const diskIndicator =
						document.getElementById("disk-indicator");
					const tempIndicator =
						document.getElementById("temp-indicator");

					const cpuUsageText = document.getElementById("cpu-usage");
					const memUsageText = document.getElementById("mem-usage");
					const diskUsageText = document.getElementById("disk-usage");
					const tempValueText = document.getElementById("temp-value");
					const uptimeValueText =
						document.getElementById("uptime-value");

					// Indicadores visuales para el uso de CPU
					if (data.cpuUsage < 50) {
						cpuIndicator.classList.remove(
							"bg-yellow-500",
							"bg-red-500",
						);
						cpuIndicator.classList.add("bg-green-500");
					} else if (data.cpuUsage >= 50 && data.cpuUsage < 80) {
						cpuIndicator.classList.remove(
							"bg-green-500",
							"bg-red-500",
						);
						cpuIndicator.classList.add("bg-yellow-500");
					} else {
						cpuIndicator.classList.remove(
							"bg-green-500",
							"bg-yellow-500",
						);
						cpuIndicator.classList.add("bg-red-500");
					}

					// Indicadores visuales para el uso de memoria
					if (memUsage < 50) {
						memIndicator.classList.remove(
							"bg-yellow-500",
							"bg-red-500",
						);
						memIndicator.classList.add("bg-green-500");
					} else if (memUsage >= 50 && memUsage < 80) {
						memIndicator.classList.remove(
							"bg-green-500",
							"bg-red-500",
						);
						memIndicator.classList.add("bg-yellow-500");
					} else {
						memIndicator.classList.remove(
							"bg-green-500",
							"bg-yellow-500",
						);
						memIndicator.classList.add("bg-red-500");
					}
					// Indicadores visuales para el uso del disco
					if (diskUsage < 50) {
						diskIndicator.classList.remove(
							"bg-yellow-500",
							"bg-red-500",
						);
						diskIndicator.classList.add("bg-green-500");
					} else if (diskUsage >= 50 && diskUsage < 80) {
						diskIndicator.classList.remove(
							"bg-green-500",
							"bg-red-500",
						);
						diskIndicator.classList.add("bg-yellow-500");
					} else {
						diskIndicator.classList.remove(
							"bg-green-500",
							"bg-yellow-500",
						);
						diskIndicator.classList.add("bg-red-500");
					}

					// Indicadores visuales para la temperatura
					if (temp < 40) {
						tempIndicator.classList.remove(
							"bg-yellow-500",
							"bg-red-500",
						);
						tempIndicator.classList.add("bg-green-500");
					} else if (temp >= 40 && temp < 60) {
						tempIndicator.classList.remove(
							"bg-green-500",
							"bg-red-500",
						);
						tempIndicator.classList.add("bg-yellow-500");
					} else {
						tempIndicator.classList.remove(
							"bg-green-500",
							"bg-yellow-500",
						);
						tempIndicator.classList.add("bg-red-500");
					}

					cpuUsageText.textContent = `Uso de CPU: ${data.cpuUsage}%`;
					memUsageText.textContent = `Uso de Memoria: ${memUsage}% (${data.usedMem}/${data.totalMem})`;
					diskUsageText.textContent = `Uso del disco: ${diskUsage}% (${data.usedDisk}/${data.totalDisk})`;
					tempValueText.textContent = `Temperatura: ${data.temp}`;
					uptimeValueText.textContent = `Tiempo encendido: ${data.uptime}`;
				}

				window.onload = () => getSystemStatus();
				setInterval(() => {
					getSystemStatus();
				}, 1000);
			</script>
		</section>
	</main>
</Layout>
